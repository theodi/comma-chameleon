// Generated by CoffeeScript 1.9.3
(function() {
  var BrowserWindow, assert, fs, http, isCI, path, remote, url;

  assert = require('assert');

  fs = require('fs');

  path = require('path');

  remote = require('remote');

  http = require('http');

  url = require('url');


  BrowserWindow = remote.require('browser-window');

  isCI = remote.process.argv[2] === '--ci';

  describe('browser-window module', function() {
    var fixtures, w;
    fixtures = path.resolve(__dirname, 'fixtures');
    w = null;
    beforeEach(function() {
      if (w != null) {
        w.destroy();
      }
      return w = new BrowserWindow({
        show: false,
        width: 400,
        height: 400
      });
    });
    afterEach(function() {
      if (w != null) {
        w.destroy();
      }
      return w = null;
    });
    describe('BrowserWindow.close()', function() {
      it('should emit unload handler', function(done) {
        w.webContents.on('did-finish-load', function() {
          return w.close();
        });
        w.on('closed', function() {
          var content, test;
          test = path.join(fixtures, 'api', 'unload');
          content = fs.readFileSync(test);
          fs.unlinkSync(test);
          assert.equal(String(content), 'unload');
          return done();
        });
        return w.loadUrl('file://' + path.join(fixtures, 'api', 'unload.html'));
      });
      return it('should emit beforeunload handler', function(done) {
        w.on('onbeforeunload', function() {
          return done();
        });
        w.webContents.on('did-finish-load', function() {
          return w.close();
        });
        return w.loadUrl('file://' + path.join(fixtures, 'api', 'beforeunload-false.html'));
      });
    });
    describe('window.close()', function() {
      it('should emit unload handler', function(done) {
        w.on('closed', function() {
          var content, test;
          test = path.join(fixtures, 'api', 'close');
          content = fs.readFileSync(test);
          fs.unlinkSync(test);
          assert.equal(String(content), 'close');
          return done();
        });
        return w.loadUrl('file://' + path.join(fixtures, 'api', 'close.html'));
      });
      return it('should emit beforeunload handler', function(done) {
        w.on('onbeforeunload', function() {
          return done();
        });
        return w.loadUrl('file://' + path.join(fixtures, 'api', 'close-beforeunload-false.html'));
      });
    });
    describe('BrowserWindow.loadUrl(url)', function() {
      it('should emit did-start-loading event', function(done) {
        w.webContents.on('did-start-loading', function() {
          return done();
        });
        return w.loadUrl('about:blank');
      });
      return it('should emit did-fail-load event', function(done) {
        w.webContents.on('did-fail-load', function() {
          return done();
        });
        return w.loadUrl('file://a.txt');
      });
    });
    describe('BrowserWindow.show()', function() {
      return it('should focus on window', function() {
        if (isCI) {
          return;
        }
        w.show();
        return assert(w.isFocused());
      });
    });
    describe('BrowserWindow.showInactive()', function() {
      return it('should not focus on window', function() {
        w.showInactive();
        return assert(!w.isFocused());
      });
    });
    describe('BrowserWindow.focus()', function() {
      return it('does not make the window become visible', function() {
        assert.equal(w.isVisible(), false);
        w.focus();
        return assert.equal(w.isVisible(), false);
      });
    });
    describe('BrowserWindow.capturePage(rect, callback)', function() {
      return it('calls the callback with a Buffer', function(done) {
        return w.capturePage({
          x: 0,
          y: 0,
          width: 100,
          height: 100
        }, function(image) {
          assert.equal(image.isEmpty(), true);
          return done();
        });
      });
    });
    describe('BrowserWindow.setSize(width, height)', function() {
      return it('sets the window size', function(done) {
        var size;
        size = [300, 400];
        w.once('resize', function() {
          var newSize;
          newSize = w.getSize();
          assert.equal(newSize[0], size[0]);
          assert.equal(newSize[1], size[1]);
          return done();
        });
        return w.setSize(size[0], size[1]);
      });
    });
    describe('BrowserWindow.setPosition(x, y)', function() {
      return it('sets the window position', function(done) {
        var pos;
        pos = [10, 10];
        w.once('move', function() {
          var newPos;
          newPos = w.getPosition();
          assert.equal(newPos[0], pos[0]);
          assert.equal(newPos[1], pos[1]);
          return done();
        });
        return w.setPosition(pos[0], pos[1]);
      });
    });
    describe('BrowserWindow.setContentSize(width, height)', function() {
      it('sets the content size', function() {
        var after, size;
        size = [400, 400];
        w.setContentSize(size[0], size[1]);
        after = w.getContentSize();
        assert.equal(after[0], size[0]);
        return assert.equal(after[1], size[1]);
      });
      return it('works for framless window', function() {
        var after, size;
        w.destroy();
        w = new BrowserWindow({
          show: false,
          frame: false,
          width: 400,
          height: 400
        });
        size = [400, 400];
        w.setContentSize(size[0], size[1]);
        after = w.getContentSize();
        assert.equal(after[0], size[0]);
        return assert.equal(after[1], size[1]);
      });
    });
    describe('BrowserWindow.fromId(id)', function() {
      return it('returns the window with id', function() {
        return assert.equal(w.id, BrowserWindow.fromId(w.id).id);
      });
    });
    describe('BrowserWindow.setResizable(resizable)', function() {
      return it('does not change window size for frameless window', function() {
        var s;
        w.destroy();
        w = new BrowserWindow({
          show: true,
          frame: false
        });
        s = w.getSize();
        w.setResizable(!w.isResizable());
        return assert.deepEqual(s, w.getSize());
      });
    });
    describe('"use-content-size" option', function() {
      it('make window created with content size when used', function() {
        var contentSize;
        w.destroy();
        w = new BrowserWindow({
          show: false,
          width: 400,
          height: 400,
          'use-content-size': true
        });
        contentSize = w.getContentSize();
        assert.equal(contentSize[0], 400);
        return assert.equal(contentSize[1], 400);
      });
      it('make window created with window size when not used', function() {
        var size;
        size = w.getSize();
        assert.equal(size[0], 400);
        return assert.equal(size[1], 400);
      });
      return it('works for framless window', function() {
        var contentSize, size;
        w.destroy();
        w = new BrowserWindow({
          show: false,
          frame: false,
          width: 400,
          height: 400,
          'use-content-size': true
        });
        contentSize = w.getContentSize();
        assert.equal(contentSize[0], 400);
        assert.equal(contentSize[1], 400);
        size = w.getSize();
        assert.equal(size[0], 400);
        return assert.equal(size[1], 400);
      });
    });
    describe('"enable-larger-than-screen" option', function() {
      if (process.platform === 'linux') {
        return;
      }
      beforeEach(function() {
        w.destroy();
        return w = new BrowserWindow({
          show: true,
          width: 400,
          height: 400,
          'enable-larger-than-screen': true
        });
      });
      it('can move the window out of screen', function() {
        var after;
        w.setPosition(-10, -10);
        after = w.getPosition();
        assert.equal(after[0], -10);
        return assert.equal(after[1], -10);
      });
      return it('can set the window larger than screen', function() {
        var after, size;
        size = require('screen').getPrimaryDisplay().size;
        size.width += 100;
        size.height += 100;
        w.setSize(size.width, size.height);
        after = w.getSize();
        assert.equal(after[0], size.width);
        return assert.equal(after[1], size.height);
      });
    });
    describe('"preload" options', function() {
      return it('loads the script before other scripts in window', function(done) {
        var preload;
        preload = path.join(fixtures, 'module', 'set-global.js');
        remote.require('ipc').once('preload', function(event, test) {
          assert.equal(test, 'preload');
          return done();
        });
        w.destroy();
        w = new BrowserWindow({
          show: false,
          width: 400,
          height: 400,
          preload: preload
        });
        return w.loadUrl('file://' + path.join(fixtures, 'api', 'preload.html'));
      });
    });
    describe('beforeunload handler', function() {
      it('returning true would not prevent close', function(done) {
        w.on('closed', function() {
          return done();
        });
        return w.loadUrl('file://' + path.join(fixtures, 'api', 'close-beforeunload-true.html'));
      });
      it('returning non-empty string would not prevent close', function(done) {
        w.on('closed', function() {
          return done();
        });
        return w.loadUrl('file://' + path.join(fixtures, 'api', 'close-beforeunload-string.html'));
      });
      it('returning false would prevent close', function(done) {
        w.on('onbeforeunload', function() {
          return done();
        });
        return w.loadUrl('file://' + path.join(fixtures, 'api', 'close-beforeunload-false.html'));
      });
      return it('returning empty string would prevent close', function(done) {
        w.on('onbeforeunload', function() {
          return done();
        });
        return w.loadUrl('file://' + path.join(fixtures, 'api', 'close-beforeunload-empty-string.html'));
      });
    });
    describe('new-window event', function() {
      if (isCI && process.platform === 'darwin') {
        return;
      }
      it('emits when window.open is called', function(done) {
        w.webContents.once('new-window', function(e, url, frameName) {
          e.preventDefault();
          assert.equal(url, 'http://host/');
          assert.equal(frameName, 'host');
          return done();
        });
        return w.loadUrl("file://" + fixtures + "/pages/window-open.html");
      });
      return it('emits when link with target is called', function(done) {
        w.webContents.once('new-window', function(e, url, frameName) {
          e.preventDefault();
          assert.equal(url, 'http://host/');
          assert.equal(frameName, 'target');
          return done();
        });
        return w.loadUrl("file://" + fixtures + "/pages/target-name.html");
      });
    });
    describe('maximize event', function() {
      if (isCI) {
        return;
      }
      return it('emits when window is maximized', function(done) {
        this.timeout(10000);
        w.once('maximize', function() {
          return done();
        });
        w.show();
        return w.maximize();
      });
    });
    describe('unmaximize event', function() {
      if (isCI) {
        return;
      }
      return it('emits when window is unmaximized', function(done) {
        this.timeout(10000);
        w.once('unmaximize', function() {
          return done();
        });
        w.show();
        w.maximize();
        return w.unmaximize();
      });
    });
    describe('minimize event', function() {
      if (isCI) {
        return;
      }
      return it('emits when window is minimized', function(done) {
        this.timeout(10000);
        w.once('minimize', function() {
          return done();
        });
        w.show();
        return w.minimize();
      });
    });
    return describe('will-navigate event', function() {
      if (isCI && process.platform === 'darwin') {
        return;
      }
      return it('emits when user starts a navigation', function(done) {
        this.timeout(10000);
        w.webContents.on('will-navigate', function(event, url) {
          event.preventDefault();
          assert.equal(url, 'https://www.github.com/');
          return done();
        });
        return w.loadUrl("file://" + fixtures + "/pages/will-navigate.html");
      });
    });
  });

}).call(this);
