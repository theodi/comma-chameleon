// Generated by CoffeeScript 1.9.3
(function() {
  var BrowserWindow, assert, ipc, path, remote;

  assert = require('assert');

  ipc = require('ipc');

  path = require('path');

  remote = require('remote');

  BrowserWindow = remote.require('browser-window');

  describe('ipc module', function() {
    var fixtures;
    fixtures = path.join(__dirname, 'fixtures');
    describe('remote.require', function() {
      it('should returns same object for the same module', function() {
        var dialog1, dialog2;
        dialog1 = remote.require('dialog');
        dialog2 = remote.require('dialog');
        return assert.equal(dialog1, dialog2);
      });
      it('should work when object contains id property', function() {
        var a;
        a = remote.require(path.join(fixtures, 'module', 'id.js'));
        return assert.equal(a.id, 1127);
      });
      return it('should search module from the user app', function() {
        assert.equal(path.normalize(remote.process.mainModule.filename), path.resolve(__dirname, 'static', 'main.js'));
        return assert.equal(path.normalize(remote.process.mainModule.paths[0]), path.resolve(__dirname, 'static', 'node_modules'));
      });
    });
    describe('remote.createFunctionWithReturnValue', function() {
      return it('should be called in browser synchronously', function() {
        var buf, call, result;
        buf = new Buffer('test');
        call = remote.require(path.join(fixtures, 'module', 'call.js'));
        result = call.call(remote.createFunctionWithReturnValue(buf));
        return assert.equal(result.constructor.name, 'Buffer');
      });
    });
    describe('remote object in renderer', function() {
      it('can change its properties', function() {
        var property, property2;
        property = remote.require(path.join(fixtures, 'module', 'property.js'));
        assert.equal(property.property, 1127);
        property.property = 1007;
        assert.equal(property.property, 1007);
        property2 = remote.require(path.join(fixtures, 'module', 'property.js'));
        assert.equal(property2.property, 1007);
        return property.property = 1127;
      });
      return it('can construct an object from its member', function() {
        var call, obj;
        call = remote.require(path.join(fixtures, 'module', 'call.js'));
        obj = new call.constructor;
        return assert.equal(obj.test, 'test');
      });
    });
    describe('remote value in browser', function() {
      return it('keeps its constructor name for objects', function() {
        var buf, print_name;
        buf = new Buffer('test');
        print_name = remote.require(path.join(fixtures, 'module', 'print_name.js'));
        return assert.equal(print_name.print(buf), 'Buffer');
      });
    });
    describe('remote promise', function() {
      return it('can be used as promise in each side', function(done) {
        var promise;
        promise = remote.require(path.join(fixtures, 'module', 'promise.js'));
        return promise.twicePromise(Promise.resolve(1234)).then((function(_this) {
          return function(value) {
            assert.equal(value, 2468);
            return done();
          };
        })(this));
      });
    });
    describe('ipc.sender.send', function() {
      return it('should work when sending an object containing id property', function(done) {
        var obj;
        obj = {
          id: 1,
          name: 'ly'
        };
        ipc.once('message', function(message) {
          assert.deepEqual(message, obj);
          return done();
        });
        return ipc.send('message', obj);
      });
    });
    return describe('ipc.sendSync', function() {
      it('can be replied by setting event.returnValue', function() {
        var msg;
        msg = ipc.sendSync('echo', 'test');
        return assert.equal(msg, 'test');
      });
      return it('does not crash when reply is not sent and browser is destroyed', function(done) {
        var w;
        this.timeout(10000);
        w = new BrowserWindow({
          show: false
        });
        remote.require('ipc').once('send-sync-message', function(event) {
          event.returnValue = null;
          w.destroy();
          return done();
        });
        return w.loadUrl('file://' + path.join(fixtures, 'api', 'send-sync-message.html'));
      });
    });
  });

}).call(this);
