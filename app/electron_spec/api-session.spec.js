// Generated by CoffeeScript 1.9.3
(function() {
  var BrowserWindow, app, assert, http, path, remote;

  assert = require('assert');

  remote = require('remote');

  http = require('http');

  path = require('path');

  app = remote.require('app');

  BrowserWindow = remote.require('browser-window');

  describe('session module', function() {
    var fixtures, url, w;
    this.timeout(10000);
    fixtures = path.resolve(__dirname, 'fixtures');
    w = null;
    url = "http://127.0.0.1";
    beforeEach(function() {
      return w = new BrowserWindow({
        show: false,
        width: 400,
        height: 400
      });
    });
    afterEach(function() {
      return w.destroy();
    });
    it('should get cookies', function(done) {
      var server;
      server = http.createServer(function(req, res) {
        res.setHeader('Set-Cookie', ['0=0']);
        res.end('finished');
        return server.close();
      });
      return server.listen(0, '127.0.0.1', function() {
        var port;
        port = server.address().port;
        w.loadUrl(url + ":" + port);
        return w.webContents.on('did-finish-load', function() {
          return w.webContents.session.cookies.get({
            url: url
          }, function(error, list) {
            var cookie, i, len;
            if (error) {
              return done(error);
            }
            for (i = 0, len = list.length; i < len; i++) {
              cookie = list[i];
              if (cookie.name === '0') {
                if (cookie.value === '0') {
                  return done();
                } else {
                  return done("cookie value is " + cookie.value + " while expecting 0");
                }
              }
            }
            return done('Can not find cookie');
          });
        });
      });
    });
    it('should over-write the existent cookie', function(done) {
      return app.defaultSession.cookies.set({
        url: url,
        name: '1',
        value: '1'
      }, function(error) {
        if (error) {
          return done(error);
        }
        return app.defaultSession.cookies.get({
          url: url
        }, function(error, list) {
          var cookie, i, len;
          if (error) {
            return done(error);
          }
          for (i = 0, len = list.length; i < len; i++) {
            cookie = list[i];
            if (cookie.name === '1') {
              if (cookie.value === '1') {
                return done();
              } else {
                return done("cookie value is " + cookie.value + " while expecting 1");
              }
            }
          }
          return done('Can not find cookie');
        });
      });
    });
    it('should remove cookies', function(done) {
      return app.defaultSession.cookies.set({
        url: url,
        name: '2',
        value: '2'
      }, function(error) {
        if (error) {
          return done(error);
        }
        return app.defaultSession.cookies.remove({
          url: url,
          name: '2'
        }, function(error) {
          if (error) {
            return done(error);
          }
          return app.defaultSession.cookies.get({
            url: url
          }, function(error, list) {
            var cookie, i, len;
            if (error) {
              return done(error);
            }
            for (i = 0, len = list.length; i < len; i++) {
              cookie = list[i];
              if (cookie.name === '2') {
                return done('Cookie not deleted');
              }
            }
            return done();
          });
        });
      });
    });
    return describe('session.clearStorageData(options)', function() {
      fixtures = path.resolve(__dirname, 'fixtures');
      return it('clears localstorage data', function(done) {
        var ipc;
        ipc = remote.require('ipc');
        ipc.on('count', function(event, count) {
          ipc.removeAllListeners('count');
          assert(!count);
          return done();
        });
        w.loadUrl('file://' + path.join(fixtures, 'api', 'localstorage.html'));
        return w.webContents.on('did-finish-load', function() {
          var options;
          options = {
            origin: "file://",
            storages: ['localstorage'],
            quotas: ['persistent']
          };
          return w.webContents.session.clearStorageData(options, function() {
            return w.webContents.send('getcount');
          });
        });
      });
    });
  });

}).call(this);
